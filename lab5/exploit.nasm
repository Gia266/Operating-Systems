
bits 64
start:

  ; Clear RAX register
  xor rax, rax

  ; Load command string ("/bin/env") onto the stack
  xor rdx, rdx 
  push rdx
  mov rax, '/bin/env'

  ; Load pointer to command string into rdi
  mov rdi, rsp

  ; Create argv array 
  push rdi                 
  xor rdx, rdx 
  push rdx             

  ; Load pointer to the argv array into RSI
  mov rsi, rsp

  ; get required value into RDX
  xor rax, rax                ; Clear RAX register
  mov ax, 0x7fff              ; Load 0x7fff into the low 16 bits of RAX
  shl rdx, 32                 ; Left shift RDX by 32 bits
  mov ecx, 0xf7fbe6ff         ; Load 0xf7fbe6ff into ECX
  xor cl, cl                  ; Clear the low 8 bits of RCX
  or rdx, rcx                 ; Combine registers using the OR instruction
  mov rax, [rdx]              ; Load RAX with the qword (64 bits) from the memory 

  ; Clear RAX register
  xor rax, rax

  ; execve system call
  mov rax, 0x3b                 
  syscall

  ;Exit sys call 
  mov al, 0x3c                
  xor edi, edi                
  syscall


  ; space for data so stack does not overflow the code
  dq 0xffffffffffffffff
  dq 0xffffffffffffffff
  dq 0xffffffffffffffff
  dq 0xffffffffffffffff
  dq 0xffffffffffffffff
  end: dd end-start
  


